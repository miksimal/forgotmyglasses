{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["AWS","config","region","credentials","CognitoIdentityCredentials","IdentityPoolId","rekog","Rekognition","App","useState","trainingUploadIsLoading","setTrainingUploadIsLoading","friendCheckerUploadIsLoading","setFriendCheckerUploadIsLoading","collectionId","setCollectionId","isCreatingCollection","setIsCreatingCollection","robotIsReady","setRobotIsReady","facesInCollectionCount","setFacesInCollectionCount","readFileAsync","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsArrayBuffer","indexFace","a","buffer","Error","params","CollectionId","Image","Bytes","indexFaces","promise","FaceRecords","length","window","alert","document","getElementById","scrollIntoView","console","log","message","value","searchFace","MaxFaces","searchFacesByImage","FaceMatches","similarity","Similarity","addHighlight","elementId","classList","add","removeHighlight","remove","useEffect","id","uuidv4","createCollection","className","Spinner","animation","onChange","e","target","files","Blob","type","accept","capture","onClick","click","onDragEnter","stopPropagation","preventDefault","onDragOver","onDragLeave","onDrop","dataTransfer","startsWith","indexFaceBasedOnDropEvent","color","icon","faPlus","size","searchFaceBasedOnDropEvent","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.001adfe9.chunk.js","sourcesContent":["/// <reference types=\"aws-sdk\" />\n\nimport React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport AWS from 'aws-sdk';\nimport Rekognition, { CreateCollectionRequest, IndexFacesRequest, SearchFacesByImageRequest } from \"aws-sdk/clients/rekognition\";\nimport Spinner from 'react-bootstrap/Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\n\nAWS.config.region = 'eu-west-1';\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: 'eu-west-1:4a8f8cca-1fe0-4ce5-843c-3118a21061f6',\n});\nconst rekog: AWS.Rekognition = new AWS.Rekognition();\n\nfunction App() {\n  const [trainingUploadIsLoading, setTrainingUploadIsLoading] = useState(false);\n  const [friendCheckerUploadIsLoading, setFriendCheckerUploadIsLoading] = useState(false);\n  const [collectionId, setCollectionId] = useState<string>(\"\");\n  const [isCreatingCollection, setIsCreatingCollection] = useState(true);\n  const [robotIsReady, setRobotIsReady] = useState(false);\n  const [facesInCollectionCount, setFacesInCollectionCount] = useState(0);\n\n  useEffect(() => {\n    async function createCollection() {\n      const id = uuidv4();\n      setCollectionId(id);\n      setIsCreatingCollection(true);\n      try {\n        const params: CreateCollectionRequest = {\n          CollectionId: id\n         };\n        await rekog.createCollection(params).promise();\n      } catch (e) {\n        console.log(e.message);\n        window.alert(\"Sorry, something went wrong. Please refresh the page\");\n      }\n      setIsCreatingCollection(false);\n    };\n\n    createCollection();\n  }, []);\n\n  function readFileAsync(file: Blob): Promise<string | ArrayBuffer | null> {\n    return new Promise((resolve, reject) => {\n      let reader: FileReader = new FileReader();\n  \n      reader.onload = () => {\n        resolve(reader.result);\n      };\n  \n      reader.onerror = reject;\n  \n      reader.readAsArrayBuffer(file);\n      // thanks https://simon-schraeder.de/posts/filereader-async/\n    })\n  }\n\n  async function indexFace(file: Blob) {\n    setTrainingUploadIsLoading(true);\n    try {\n      const buffer = await readFileAsync(file);\n      if (buffer == null) throw new Error('Error reading file');\n\n      const params: IndexFacesRequest = {\n        CollectionId: collectionId,\n        Image: {\n          Bytes: buffer\n        }\n      };\n      const result: Rekognition.IndexFacesResponse  = await rekog.indexFaces(params).promise();\n      if (result.FaceRecords && result.FaceRecords.length === 0) {\n        window.alert('Woops, no face was registered in that photo. Can you try a different one?');\n      } else {\n        setRobotIsReady(true);\n        setFacesInCollectionCount(facesInCollectionCount + 1);\n        ((document.getElementById(\"friendCheckerDropArea\")) as HTMLDivElement).scrollIntoView(true);\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n    setTrainingUploadIsLoading(false);\n    ((document.getElementById(\"uploadTrainingPhoto\")) as HTMLInputElement).value = \"\";\n  }\n\n  async function searchFace(file: Blob) {\n    setFriendCheckerUploadIsLoading(true);\n    try {\n      const buffer = await readFileAsync(file);\n      if (buffer == null) throw new Error('Error reading file');\n\n      const params: SearchFacesByImageRequest = {\n        CollectionId: collectionId,\n        Image: {\n          Bytes: buffer\n        },\n        MaxFaces: 1,\n      };\n      const result: Rekognition.SearchFacesByImageResponse  = await rekog.searchFacesByImage(params).promise();\n      if (!result.FaceMatches) return;\n      if (result.FaceMatches?.length === 0) {\n        window.alert('This is definitely not your friend. Abort!')\n        setFriendCheckerUploadIsLoading(false);\n        ((document.getElementById(\"uploadFriendPhoto\")) as HTMLInputElement).value = \"\";\n        return;\n      }\n      if (result.FaceMatches[0]) {\n        const similarity = result.FaceMatches[0].Similarity;\n        if (!similarity) return;\n        let message: string;\n        switch (true) {\n          case (similarity < 50):\n            message = 'This is probably not your friend (less than 50% similarity)';\n            break;\n          case (similarity < 75):\n            message = 'This could be, but probably is not, your friend (less than 75% similarity) - worth a go?'\n            break;\n          case (similarity < 90):\n            message = 'This is probably your friend (greater than 75% similarity)! Say hello!'\n            break;\n          case (similarity < 99.5):\n            message = 'This is almost certainly your friend (greater than 90% similarity)! Say hello!'\n            break;\n          case (similarity <= 100):\n            message = 'This is DEFINITELY your friend (100% similarity score)!'\n            break;\n          default:\n            message = 'Something went wrong, sorry!';\n        }\n        window.alert(message);\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n    ((document.getElementById(\"uploadFriendPhoto\")) as HTMLInputElement).value = \"\";\n    setFriendCheckerUploadIsLoading(false);\n  }\n\n  function renderHeadingForTrainingPhotoUpload() {\n    if (facesInCollectionCount === 0) {\n      return <><h2>Provide a photo of at least one friend.</h2><p>A photo may contain up to 100 faces.</p></>\n    }\n    else if (facesInCollectionCount > 0 && facesInCollectionCount < 2) {\n      return <><h2>One photo added 🎉</h2><p>Add more photos or scroll down to try the friend-checker!</p></>\n    }\n    else {\n      return <><h2>{facesInCollectionCount} photos added 🎉</h2><p>Add more photos or scroll down to try the friend-checker!</p></>\n    }\n  }\n\n  function indexFaceBasedOnDropEvent(e: React.DragEvent<HTMLDivElement>) {\n    const files = e.dataTransfer.files;\n    if (files.length > 1) {\n      window.alert(\"Sorry, only one image at at time please\");\n      return;\n    }\n    const file = files[0];\n    if (!file.type.startsWith(\"image\")) {\n      window.alert(\"File must be an image\");\n      return;\n    }\n    indexFace(file);\n  }\n\n  function renderTrainingPhotoUpload() {\n    return (\n      <div>\n        {renderHeadingForTrainingPhotoUpload()}\n        <input id=\"uploadTrainingPhoto\" onChange={(e) => {const file = e.target.files ? e.target.files[0] : new Blob(); indexFace(file)}} type=\"file\" accept=\"image/*\" capture=\"camera\"></input>\n        {trainingUploadIsLoading ? <Spinner animation=\"border\"></Spinner> :\n          <div \n            id=\"trainingPhotoDropArea\"\n            onClick={() => ((document.getElementById(\"uploadTrainingPhoto\")) as HTMLInputElement).click()}\n            onDragEnter={(e) => {e.stopPropagation(); e.preventDefault(); addHighlight(\"trainingPhotoDropArea\");}}\n            onDragOver={(e) => {e.stopPropagation(); e.preventDefault(); addHighlight(\"trainingPhotoDropArea\");}}\n            onDragLeave={(e) => {e.stopPropagation(); e.preventDefault(); removeHighlight(\"trainingPhotoDropArea\");}}\n            onDrop={(e) => {e.stopPropagation(); e.preventDefault(); removeHighlight(\"trainingPhotoDropArea\"); indexFaceBasedOnDropEvent(e);}}\n          >\n            <FontAwesomeIcon className=\"PlusIcon\" color={\"#61dafb\"} icon={faPlus} size={\"3x\"} />\n            <div className=\"TextWithinUploadBox\">\n              <span>Drag & drop</span>\n              <span>or click to upload</span>\n            </div>\n          </div>\n        }\n      </div>\n    )\n  }\n\n  function addHighlight(elementId: string) {\n    const dropbox = (document.getElementById(elementId)) as HTMLDivElement;\n    dropbox.classList.add('highlight');\n  }\n\n  function removeHighlight(elementId: string) {\n    const dropbox = (document.getElementById(elementId)) as HTMLDivElement;\n    dropbox.classList.remove('highlight');\n  }\n\n  function searchFaceBasedOnDropEvent(e: React.DragEvent<HTMLDivElement>) {\n    const files = e.dataTransfer.files;\n    if (files.length > 1) {\n      window.alert(\"Sorry, only one image at at time please\");\n      return;\n    }\n    const file = files[0];\n    if (!file.type.startsWith(\"image\")) {\n      window.alert(\"File must be an image\");\n      return;\n    }\n    searchFace(file);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>\n          Ever forget your glasses and fail to recognise a friend?\n        </h2>\n        <h4>\n          Keep calm and use this robot to help you 👀\n        </h4>\n        <ul>\n            <li>\n              <b>Teach the robot</b> by uploading photos of your friends 🍰\n            </li>\n            <li>\n              <b>Ask the robot if someone is your friend</b> by quickly snapping a photo 📸\n            </li>\n          </ul>\n      </header>\n      <div>\n        {isCreatingCollection ? <Spinner animation=\"border\"></Spinner> : renderTrainingPhotoUpload()}\n        {robotIsReady &&\n          <div className=\"FriendChecker\">\n            <h2>Friend-checker: Snap a photo of your 'friend' 📸</h2>\n            <p>If more than one person is present in the photo, the largest face will be used.</p>\n            <input id=\"uploadFriendPhoto\" onChange={(e) => {const file = e.target.files ? e.target.files[0] : new Blob(); searchFace(file)}} type=\"file\" accept=\"image/*\" capture=\"camera\"></input>\n            {friendCheckerUploadIsLoading ? <Spinner animation=\"border\"></Spinner> :\n              <div \n                id=\"friendCheckerDropArea\"\n                onClick={() => ((document.getElementById(\"uploadFriendPhoto\")) as HTMLInputElement).click()}\n                onDragEnter={(e) => {e.stopPropagation(); e.preventDefault(); addHighlight(\"friendCheckerDropArea\");}}\n                onDragOver={(e) => {e.stopPropagation(); e.preventDefault(); addHighlight(\"friendCheckerDropArea\");}}\n                onDragLeave={(e) => {e.stopPropagation(); e.preventDefault(); removeHighlight(\"friendCheckerDropArea\");}}\n                onDrop={(e) => {e.stopPropagation(); e.preventDefault(); removeHighlight(\"friendCheckerDropArea\"); searchFaceBasedOnDropEvent(e);}}\n              >\n                <FontAwesomeIcon className=\"PlusIcon\" color={\"#61dafb\"} icon={faPlus} size={\"3x\"} />\n                <div className=\"TextWithinUploadBox\">\n                  <span>Drag & drop</span>\n                  <span>or click to upload</span>\n                </div>\n              </div>\n            }\n          </div>\n        }\n        {!isCreatingCollection && <p className=\"Disclaimer\">Note: extracted facial features from the training photos are stored for a maximum of 24 hours. Your data will be used only by you. For photos uploaded in the 'friend-checker' nothing is stored.</p>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}